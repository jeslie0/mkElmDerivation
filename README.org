#+title: mkElmDerivation
This project is an attempt to provide a way to package elm applications with nix, with less user input required than the standard [[https://github.com/cachix/elm2nix][elm2nix]]. This project is based heavily on elm2nix and wouldn't be possible without it. There should be no need to generate any nix files using elm2nix, and no updates required when installing a new elm package. The nix expression is generated on the fly from the given =elm.json= file.

The flake provides an overlay containing the function =mkElmDerivation=, which will build an elm project. The function takes the following attribute set as an input:

#+begin_src nix
{ # Optional: The name of the elm project. Read from "name" key in
  # elm.json if not specified.
  pname ? with builtins; (fromJSON (readFile elmJson))."name"

  # Optional: The version of the elm projec. Read from "version" key in
  # elm.json if not specified.
, version ? with builtins; (fromJSON (readFile elmJson))."version"

  # The base directory of your elm project (most likely ./.).
, src

  # Optional: The elm projects elm.json file. Will default to
  # ${src}/elm.json
, elmJson ? "${src}/elm.json"

  # Optional: The nix expression containing the elm projects dependency
  # names, versions and SHA256 hashes. This will be generated
  # automatically, but can be ready from a file generated by
  # elm2nix convert. This must be a nix expression, not a file, so to
  # use an existing nix expression, set this equal to
  # (import ./elm-srcs.nix).
  # , elmPackages ? elmSrcsFunc elmJson

  # Optional: The directory containing the .elm files to
  # compile. Currently, we only support using one directory.
, srcdir ? with builtins; "${src}/${head ((fromJSON (readFile elmJson))."source-directories")}"

  # Optional: The version of elm used. Read from elm.json file.
, elmVersion ? with builtins; (fromJSON (readFile elmJson))."elm-version"

  # Optional: The files in srcdir to compile.
, targets ? [ "Main" ]

  # Optional: Should the outputted files by JavaScript or HTML?
, outputJavaScript ? false
}
#+end_src

Here are examples uses of the overlay and output function:

#+name: Overlay example
#+begin_src nix
# flake.nix
{
  description = "An elm derivation using the mkElmDerivation overlay.";

  inputs = {
    nixpkgs.url = github:nixos/nixpkgs/nixos-unstable;
    mkElmDerivation.url = github:jeslie0/mkElmDerivation;
  };

  outputs = { self, nixpkgs, mkElmDerivation }:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs {
        overlays = [ mkElmDerivation.overlay.${system} ];
        inherit system;
      };
      elmPackages = pkgs.elmPackages;
    in
      {
        packages.${system}.default = pkgs.mkElmDerivation {
          pname = "elm-app";
          version = "0.1.0";
          src = ./.;
          outputJavaScript = true;
        };

      };
}
#+end_src

Note that this project is in alpha and there may be breaking changes in the future.
